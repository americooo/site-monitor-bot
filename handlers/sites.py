# handlers/sites.py - –ö–æ–º–∞–Ω–¥—ã Telegram
from aiogram import Router, F,types
from aiogram.types import Message
from database import SessionLocal
from models import Site, SiteHistory
from datetime import datetime, timedelta
import validators
import csv
import io
import logging

router = Router()
logging.basicConfig(filename='bot.log', level=logging.INFO)

@router.message(F.text == "/start")
async def start_command(message: Message):
    commands = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–æ–≤.\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /addsite <url> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–∞–π—Ç\n"
        "   –ù–∞–ø—Ä–∏–º–µ—Ä: /addsite https://google.com\n"
        "‚Ä¢ /listsites ‚Äî —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤\n"
        "‚Ä¢ /delsite <id> ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç\n"
        "   –ù–∞–ø—Ä–∏–º–µ—Ä: /delsite 1\n"
        "‚Ä¢ /setinterval <id> <–º–∏–Ω—É—Ç—ã> ‚Äî –∑–∞–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "   –ù–∞–ø—Ä–∏–º–µ—Ä: /setinterval 1 10\n"
        "‚Ä¢ /toggle_notifications <id> ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "   –ù–∞–ø—Ä–∏–º–µ—Ä: /toggle_notifications 1\n"
        "‚Ä¢ /history <id> ‚Äî –∏—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫\n"
        "   –ù–∞–ø—Ä–∏–º–µ—Ä: /history 1\n"
        "‚Ä¢ /uptime <id> ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞ 24 —á–∞—Å–∞\n"
        "   –ù–∞–ø—Ä–∏–º–µ—Ä: /uptime 1\n"
        "‚Ä¢ /export <id> ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ CSV\n"
        "   –ù–∞–ø—Ä–∏–º–µ—Ä: /export 1\n"
    )
    await message.answer(commands)

@router.message(F.text.regexp(r"^/addsite(\s|$)"))
async def add_site(message: Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addsite https://example.com")
        return

    url = parts[1].strip()

    if not validators.url(url):
        await message.answer("‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π URL!")
        return

    db = SessionLocal()
    existing = db.query(Site).filter(Site.url == url).first()
    if existing:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —Å–∞–π—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.", disable_web_page_preview=True)
    else:
        new_site = Site(url=url)
        db.add(new_site)
        db.commit()
        await message.answer(f"‚úÖ –°–∞–π—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {url}", disable_web_page_preview=True)
    db.close()

@router.message(F.text.regexp(r"^/listsites(\s|$)"))
async def list_sites(message: Message):
    db = SessionLocal()
    sites = db.query(Site).all()
    if not sites:
        await message.answer("–°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –ø—É—Å—Ç.", disable_web_page_preview=True)
    else:
        text = "\n".join([f"{s.id}. {s.url} ({s.interval} –º–∏–Ω, –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if s.notifications_enabled else '–í—ã–∫–ª—é—á–µ–Ω—ã'})" for s in sites])
        await message.answer("üìã –°–∞–π—Ç—ã:\n" + text, disable_web_page_preview=True)
    db.close()

@router.message(F.text.regexp(r"^/delsite(\s|$)"))
async def delete_site(message: Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delsite site_id")
        return

    try:
        site_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID!")
        return

    db = SessionLocal()
    site = db.query(Site).filter(Site.id == site_id).first()
    if site:
        db.delete(site)
        db.commit()
        await message.answer(f"üóëÔ∏è –°–∞–π—Ç —É–¥–∞–ª–µ–Ω: {site.url}")
    else:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    db.close()

@router.message(F.text.regexp(r"^/setinterval(\s|$)"))
async def set_interval(message: Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setinterval site_id –º–∏–Ω—É—Ç—ã")
        return

    try:
        site_id = int(parts[1])
        interval = int(parts[2])
    except ValueError:
        await message.answer("‚ùå ID –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏!")
        return

    db = SessionLocal()
    site = db.query(Site).filter(Site.id == site_id).first()
    if site:
        site.interval = interval
        db.commit()
        await message.answer(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è {site.url} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {interval} –º–∏–Ω—É—Ç.")
    else:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    db.close()

@router.message(F.text.regexp(r"^/toggle_notifications(\s|$)"))
async def toggle_notifications(message: Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /toggle_notifications site_id")
        return

    try:
        site_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID!")
        return

    db = SessionLocal()
    site = db.query(Site).filter(Site.id == site_id).first()
    if site:
        site.notifications_enabled = not site.notifications_enabled
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if site.notifications_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        db.commit()
        await message.answer(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {site.url} {status}.")
    else:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    db.close()

@router.message(F.text.regexp(r"^/history(\s|$)"))
async def history(message: Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /history site_id")
        return

    try:
        site_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID!")
        return

    db = SessionLocal()
    site = db.query(Site).filter(Site.id == site_id).first()
    if not site:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        db.close()
        return

    checks = (
        db.query(SiteHistory)
        .filter(SiteHistory.site_id == site_id)
        .order_by(SiteHistory.checked_at.desc())
        .limit(10)
        .all()
    )
    db.close()

    if not checks:
        await message.answer("‚ÑπÔ∏è –î–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏.")
        return

    text = f"üìä –ò—Å—Ç–æ—Ä–∏—è {site.url}:\n\n"
    for c in checks:
        status_icon = "‚úÖ" if c.status_code == 200 else "‚ùå"
        checked_time = c.checked_at.strftime("%Y-%m-%d %H:%M:%S")
        text += f"{status_icon} {c.status_code or '-'} | {c.response_time or '-'} –º—Å | {checked_time}\n"

    await message.answer(text)

@router.message(F.text.regexp(r"^/uptime(\s|$)"))
async def uptime(message: Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /uptime site_id")
        return

    try:
        site_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID!")
        return

    db = SessionLocal()
    try:
        site = db.query(Site).filter(Site.id == site_id).first()
        if not site:
            await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        since = datetime.utcnow() - timedelta(hours=24)
        checks = (
            db.query(SiteHistory)
            .filter(SiteHistory.site_id == site_id, SiteHistory.checked_at >= since)
            .all()
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ uptime: {e}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    finally:
        db.close()

    if not checks:
        await message.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.")
        return

    total = len(checks)
    ok = sum(1 for c in checks if c.status_code == 200)
    uptime_percent = round(ok / total * 100, 2)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —á–∞—Å–∞–º
    hours = 24
    uptime_data = [0] * hours
    checks_per_hour = [0] * hours

    now = datetime.utcnow()
    for c in checks:
        hour_index = int((now - c.checked_at).total_seconds() // 3600)
        if 0 <= hour_index < hours:
            checks_per_hour[hour_index] += 1
            if c.status_code == 200:
                uptime_data[hour_index] += 1

    # ASCII –≥—Ä–∞—Ñ–∏–∫
    graph_lines = []
    for h in range(hours):
        if checks_per_hour[h] > 0:
            hour_uptime = uptime_data[h] / checks_per_hour[h] * 100
            bars = "‚ñà" * int(hour_uptime / 10)  # 10% = 1 –±–ª–æ–∫
            graph_lines.append(f"{h:02d}h: {bars or '‚ñë'} ({hour_uptime:.0f}%)")
        else:
            graph_lines.append(f"{h:02d}h: ‚îÄ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")

    graph = "\n".join(graph_lines)

    text = (
        f"üìà <b>Uptime –¥–ª—è {site.url} (24—á):</b>\n\n"
        f"üî¢ –ü—Ä–æ–≤–µ—Ä–æ–∫: {total}\n"
        f"‚úÖ Uptime: {uptime_percent}%\n\n"
        f"üìä –ì—Ä–∞—Ñ–∏–∫ –ø–æ —á–∞—Å–∞–º:\n{graph}"
    )

    await message.answer(text, parse_mode="HTML")

@router.message(F.text.regexp(r"^/export(\s|$)"))
async def export_history(message: Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /export site_id")
        return

    try:
        site_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID!")
        return

    db = SessionLocal()
    try:
        site = db.query(Site).filter(Site.id == site_id).first()
        if not site:
            await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        checks = db.query(SiteHistory).filter(SiteHistory.site_id == site_id).all()
        if not checks:
            await message.answer("‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
        output = io.StringIO()
        writer = csv.writer(output)
        writer.writerow(['ID', '–°—Ç–∞—Ç—É—Å', '–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–º—Å)', '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏', '–•—ç—à –∫–æ–Ω—Ç–µ–Ω—Ç–∞'])
        for c in checks:
            writer.writerow([c.id, c.status_code, c.response_time, c.checked_at, c.content_hash])

        csv_content = output.getvalue()
        output.close()

        # –§–∞–π–ª–Ω–µ–π–º –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
        safe_name = site.url.replace("https://", "").replace("http://", "").replace("/", "_")
        filename = f"{safe_name}_history.csv"

        await message.answer_document(
            document=types.BufferedInputFile(csv_content.encode('utf-8'), filename=filename),
            caption=f"üìÑ –ò—Å—Ç–æ—Ä–∏—è {site.url} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞."
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    finally:
        db.close()